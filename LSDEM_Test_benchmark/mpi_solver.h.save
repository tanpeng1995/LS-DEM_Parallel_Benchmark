/*
 * MPI_CYLINDER_WALL_SOLVER_H_
 * Created on: June 21, 2020
 *      Author: Peng TAN (Berkeley)
 */
#ifndef MPI_CYLINDER_WALL_SOLVER_H_
#define MPI_CYLINDER_WALL_SOLVER_H_
#include "mpi_border_communication.h"
#include "mpi_particle_migration.h"
void simulate_one_step(
  int rank, double dt, int step, string indir,
  double & T_force, double & T_border, double & T_migrate, double & T_update){
  std::mt19937 gen(123123);
  std::uniform_real_distribution<double> rand_real(-1.0, 1.0);

  if(rank < USED){
    //T_border
    auto start_time1 = std::chrono::steady_clock::now();
    if(USED > 1){ updateRightLeftSide(indir); updateBackFrontSide(indir); updateDownUpSide(indir);}
    auto end_time1 = std::chrono::steady_clock::now();
    std::chrono::duration<double> diff1 = end_time1 - start_time1;
    double seconds1 = diff1.count();
    T_border += seconds1;

    auto start_time4 = std::chrono::steady_clock::now();
    clearForces(step); updateAllPoints();
    auto end_time4 = std::chrono::steady_clock::now();
    std::chrono::duration<double> diff4 = end_time4 - start_time4;
    double seconds4 = diff4.count();
    T_update += seconds4;

    //T_force
    auto start_time2 = std::chrono::steady_clock::now();
    int j, _idx, _idy, _idz, _bin_id, _proc_id, _old_bin_id;
    for(int i = 0; i < num_grains; ++i){
      /*
         --|----|----|----|--
           |  6 |  7 |  8 |
         --|----|----|----|--
           |  3 |  4 |  5 |
         --|----|----|----|--
           |  0 |  1 |  2 |
         --|----|----|----|--
      */
      int binNum = binIdList[i];
      int binArray[13] = {binNum-1, binNum+binsInDimX-1, binNum+binsInDimX, binNum+binsInDimX+1,
          binNum+binsInDimX*binsInDimY-binsInDimX-1, binNum+binsInDimX*binsInDimY-binsInDimX,
          binNum+binsInDimX*binsInDimY-binsInDimX+1, binNum+binsInDimX*binsInDimY-1,
          binNum+binsInDimX*binsInDimY,              binNum+binsInDimX*binsInDimY+1,
          binNum+binsInDimX*binsInDimY+binsInDimX-1, binNum+binsInDimX*binsInDimY+binsInDimX,
          binNum+binsInDimX*binsInDimY+binsInDimX+1};

      if(belongToThisRank[i]==1){
        j = grainIdList[i];
        //inside the same bins
        while(j != -1){
          if(grainsWorld[i].bCircleCheck(grainsWorld[j])){
            if(i < j){ grainsWorld[i].findInterparticleForceMoment(grainsWorld[j],dt); }
            else{ grainsWorld[j].findInterparticleForceMoment(grainsWorld[i],dt); }
          }
          j = grainIdList[j];
        }
        //consider 3, 6, 7, 8 in the same level as the bins of interest and 0~9 at upper level
        for (int k = 0; k < 13; ++k) {
          j = firstGrainIdList[binArray[k]];
          while(j != -1){
            if(grainsWorld[i].bCircleCheck(grainsWorld[j])){
              if(i < j){ grainsWorld[i].findInterparticleForceMoment(grainsWorld[j],dt); }
              else{ grainsWorld[j].findInterparticleForceMoment(grainsWorld[i],dt); }
            }
            j = grainIdList[j];
          }
        }
        //for demo only, apply gravity
        //grainsWorld[i].applyAcceleration(Vector3d(0.,0.,-10/scalingFactor));
	grainsWorld[i].applyAcceleration(Vector3d(rand_real(gen), rand_real(gen), rand_real(gen)) / s);
        for(int nw = 0; nw < 6; ++nw){
          if(wallPlanes[nw].bCircleCheck(grainsWorld[i])){
            wallPlanes[nw].findWallForceMoment(grainsWorld[i],dt);
          }
        } // END rigid_wall forces

      }else if(belongToThisRank[i] == 2) {
        // 1. bin_id for ghosts 2. condition branch if target belongs to this rank
        // no calculations for inside the same bins
        for (int k = 0; k < 13; ++k) {
          find_pos(binArray[k], _idx, _idy, _idz);
          if(_idz < binsInDimZ-1 && _idz > 0 && _idy < binsInDimY-1 && _idy > 0 && _idx < binsInDimX-1 && _idx > 0) {
            j = firstGrainIdList[binArray[k]];
            while(j != -1){
              if(belongToThisRank[j] == 1 && grainsWorld[i].bCircleCheck(grainsWorld[j])){
                if(i < j){ grainsWorld[i].findInterparticleForceMoment(grainsWorld[j],dt); }
                else{ grainsWorld[j].findInterparticleForceMoment(grainsWorld[i],dt); }
              }
              j = grainIdList[j];
            }
          }
        }
      }
    }

    auto end_time2 = std::chrono::steady_clock::now();
    std::chrono::duration<double> diff2 = end_time2 - start_time2;
    double seconds2 = diff2.count();
    T_force += seconds2;

    //auto start_time3 = std::chrono::steady_clock::now();
    for(int i = 0; i < num_grains; ++i){
      if(belongToThisRank[i]==1){
        find_pos(grainsWorld[i].getPosition(), _idx, _idy, _idz);
        _old_bin_id = to_bin_id(_idx, _idy, _idz);
        grainsWorld[i].takeTimestep(gDamping, dt);
        find_pos(grainsWorld[i].getPosition(), _idx, _idy, _idz);
        _proc_id = to_proc_id(_idx, _idy, _idz);
        _bin_id = to_bin_id(_idx, _idy, _idz);
        if(_proc_id == rank){
          if(_bin_id != _old_bin_id){
            //DELETE
            if(firstGrainIdList[_old_bin_id] == i){
              firstGrainIdList[_old_bin_id] = grainIdList[i];
            }else{
              j = firstGrainIdList[_old_bin_id];
              while(grainIdList[j] != i) j = grainIdList[j];
              grainIdList[j] = grainIdList[i];
            }
            grainIdList[i] = -1;
            bins[_old_bin_id].erase(i);
            //ADD
            if(firstGrainIdList[_bin_id] == -1){
              firstGrainIdList[_bin_id] = i;
            }else{
              j = firstGrainIdList[_bin_id];
              while(grainIdList[j] != -1) j = grainIdList[j];
              grainIdList[j] = i;
            }
            binIdList[i] = _bin_id;
            bins[_bin_id].insert(i);
          }
        }else{
          //cout<<"oh... particle migration idx: "<<i<<endl;
          packer[_proc_id].emplace_back(i, grainsWorld[i].getNodeShears().size(), grainsWorld[i].getQuat(), grainsWorld[i].getPosition(), grainsWorld[i].getVelocity(), grainsWorld[i].getOmega());
          packerNodeShears[_proc_id].insert(packerNodeShears[_proc_id].end(), grainsWorld[i].getNodeShears().begin(), grainsWorld[i].getNodeShears().end());
          packerNodeContact[_proc_id].insert(packerNodeContact[_proc_id].end(), grainsWorld[i].getNodeContact().begin(), grainsWorld[i].getNodeContact().end());
          packerNodeNormals[_proc_id].insert(packerNodeNormals[_proc_id].end(), grainsWorld[i].getNodeNormals().begin(), grainsWorld[i].getNodeNormals().end());
          //DELETE
          if(firstGrainIdList[_old_bin_id] == i){
            firstGrainIdList[_old_bin_id] = grainIdList[i];
          }else{
            j = firstGrainIdList[_old_bin_id];
            while(grainIdList[j] != i) j = grainIdList[j];
            grainIdList[j] = grainIdList[i];
          }
          grainIdList[i] = -1;
          binIdList[i] = -1;
          bins[_old_bin_id].erase(i);
          belongToThisRank[i] = 0;
        }
      } else if(belongToThisRank[i] == 2) {
        //clear out border particles, since border_communication happens at every step
        grainIdList[i] = -1;
        binIdList[i] = -1;
        belongToThisRank[i] = 0;
      }
    }
    //wallPlanes[1].moveHeightStrainControl(Vector3d(0.,0.,-0.1));

    //exchange grains
    auto start_time3 = std::chrono::steady_clock::now();
    if(USED > 1) { grainsExchange(indir); }
    auto end_time3 = std::chrono::steady_clock::now();
    std::chrono::duration<double> diff3 = end_time3 - start_time3;
    double seconds3 = diff3.count();
    T_migrate += seconds3;

    if(step % 5 == 0){ if(rank == 0){ cout<<"THIS IS ITERATION: "<<step<<endl<<endl; } }
  }
}
#endif /*MPI_CYLINDER_WALL_SOLVER_H_*/
